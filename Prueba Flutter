import 'package:flutter/material.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import 'package:just_audio/just_audio.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:share_plus/share_plus.dart';
import 'dart:io';
import 'dart:math';
import 'dart:typed_data';

void main() => runApp(TabEditorApp());

class TabEditorApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Tabs de Guitarra',
      theme: ThemeData.light(),
      home: HomePage(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  int _currentIndex = 0;

  final List<Widget> _pages = [
    EditorTabPage(),
    FavoritesTabPage(),
    ExploreTabPage(),
    PlayTabPage(),
    SettingsTabPage(),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _pages[_currentIndex],
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _currentIndex,
        onTap: (index) {
          setState(() {
            _currentIndex = index;
          });
        },
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.edit), label: "Editor"),
          BottomNavigationBarItem(icon: Icon(Icons.favorite), label: "Favoritos"),
          BottomNavigationBarItem(icon: Icon(Icons.explore), label: "Explorar"),
          BottomNavigationBarItem(icon: Icon(Icons.play_circle), label: "Reproducir"),
          BottomNavigationBarItem(icon: Icon(Icons.settings), label: "Ajustes"),
        ],
      ),
    );
  }
}

// === PESTAÑA: EDITOR ===
class EditorTabPage extends StatefulWidget {
  @override
  _EditorTabPageState createState() => _EditorTabPageState();
}

class _EditorTabPageState extends State<EditorTabPage> {
  late TextEditingController _controller;
  bool _darkMode = false;
  late AudioPlayer _audioPlayer;

  @override
  void initState() {
    super.initState();
    _controller = TextEditingController();
    _audioPlayer = AudioPlayer();
  }

  @override
  void dispose() {
    _controller.dispose();
    _audioPlayer.dispose();
    super.dispose();
  }

  Future<void> _generatePdf(String text) async {
    final pdf = pw.Document();

    pdf.addPage(pw.Page(
        build: (pw.Context context) => pw.Container(
              child: pw.Text(text, style: pw.TextStyle(fontSize: 14)),
            )));

    await Printing.layoutPdf(
      onLayout: (PdfPageFormat format) async => pdf.save(),
    );
  }

  Future<void> _exportAndSharePdf(String text) async {
    final pdf = pw.Document();
    pdf.addPage(pw.Page(
        build: (pw.Context context) => pw.Container(
              child: pw.Text(text, style: pw.TextStyle(fontSize: 14)),
            )));

    final dir = await getTemporaryDirectory();
    final file = File('${dir.path}/tablatura.pdf');
    await file.writeAsBytes(await pdf.save());

    await Share.shareXFiles([XFile(file.path)], subject: "Tablatura de Guitarra", text: "Aquí tienes mi tablatura:");
  }

  Future<void> _saveToFavorites(String text) async {
    if (text.trim().isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("No hay contenido para guardar")));
      return;
    }

    SharedPreferences prefs = await SharedPreferences.getInstance();
    List<String> favorites = prefs.getStringList("favorites") ?? [];

    if (!favorites.contains(text)) {
      favorites.add(text);
      await prefs.setStringList("favorites", favorites);
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Guardado en favoritos")));
    } else {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Ya está en tus favoritos")));
    }
  }

  Future<void> _playNote(String note) async {
    final toneUrl = "https://freesound.org/data/previews/438/438704_7516540-lq.mp3 ";
    await _audioPlayer.setUrl(toneUrl);
    _audioPlayer.play();
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        children: [
          Expanded(
            child: TextField(
              controller: _controller,
              maxLines: null,
              keyboardType: TextInputType.multiline,
              decoration: InputDecoration(
                hintText: 'Escribe tu tab aquí\nEjemplo:\ne|----0------------------|\nB|--------1-------------|',
                border: OutlineInputBorder(),
              ),
            ),
          ),
          SizedBox(height: 10),
          Wrap(
            spacing: 10,
            runSpacing: 10,
            alignment: WrapAlignment.center,
            children: [
              ElevatedButton.icon(
                onPressed: () => _generatePdf(_controller.text),
                icon: Icon(Icons.picture_as_pdf),
                label: Text("Ver PDF"),
              ),
              ElevatedButton.icon(
                onPressed: () => _exportAndSharePdf(_controller.text),
                icon: Icon(Icons.share),
                label: Text("Compartir por WhatsApp"),
              ),
              ElevatedButton.icon(
                onPressed: () => _saveToFavorites(_controller.text),
                icon: Icon(Icons.favorite),
                label: Text("Guardar en Favoritos"),
              ),
              ...['E', 'A', 'D', 'G', 'B', 'e'].map((note) {
                return ElevatedButton(
                  onPressed: () => _playNote(note),
                  child: Text(note),
                );
              }).toList()
            ],
          )
        ],
      ),
    );
  }
}

// === PESTAÑA: FAVORITOS ===
class FavoritesTabPage extends StatefulWidget {
  @override
  _FavoritesTabPageState createState() => _FavoritesTabPageState();
}

class _FavoritesTabPageState extends State<FavoritesTabPage> {
  List<String> _favorites = [];

  @override
  void initState() {
    super.initState();
    _loadFavorites();
  }

  Future<void> _loadFavorites() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      _favorites = prefs.getStringList("favorites") ?? [];
    });
  }

  Future<void> _deleteFavorite(int index) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    List<String> updated = prefs.getStringList("favorites") ?? [];
    updated.removeAt(index);
    await prefs.setStringList("favorites", updated);
    _loadFavorites();
  }

  @override
  Widget build(BuildContext context) {
    return _favorites.isEmpty
        ? Center(child: Text("No tienes tabs guardadas"))
        : ListView.builder(
            itemCount: _favorites.length,
            itemBuilder: (context, index) {
              return Card(
                margin: EdgeInsets.all(8),
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        _favorites[index],
                        style: TextStyle(fontFamily: "monospace"),
                      ),
                      SizedBox(height: 8),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          IconButton(
                            icon: Icon(Icons.delete),
                            onPressed: () => _deleteFavorite(index),
                          )
                        ],
                      )
                    ],
                  ),
                ),
              );
            },
          );
  }
}

// === PESTAÑA: EXPLORAR ===
class ExploreTabPage extends StatefulWidget {
  @override
  _ExploreTabPageState createState() => _ExploreTabPageState();
}

class _ExploreTabPageState extends State<ExploreTabPage> {
  final List<Map<String, String>> exampleTabs = [
    {
      "title": "Sweet Child O' Mine - Guns N' Roses",
      "tab": "e|---------------------------------------|\nB|---------------------------------------|\nG|---------------------------------------|\nD|--9-7-5-4-------------------------------|\nA|----------5-7-9--7-5-4-----------------|\nE|------------------------7-5-3-2--------|"
    },
    {
      "title": "Wonderwall - Oasis",
      "tab": "e|---------------------------------------|\nB|---------------------------------------|\nG|--0-----0--0h2p0----------------------|\nD|--2--2----------------------------2----|\nA|--2--0--------------------------2------|\nE|--------0-----------------------------0-|"
    },
    {
      "title": "Smells Like Teen Spirit - Nirvana",
      "tab": "e|---------------------------------------|\nB|---------------------------------------|\nG|--0--0--0--0--0--0--0--0--------------|\nD|--2--2--2--2--2--2--2--2--------------|\nA|--2--2--2--2--2--2--2--2--------------|\nE|--0--0--0--0--0--0--0--0--------------|"
    },
  ];

  void _addToFavorites(String tab) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    List<String> favorites = prefs.getStringList("favorites") ?? [];

    if (!favorites.contains(tab)) {
      favorites.add(tab);
      await prefs.setStringList("favorites", favorites);
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Tab añadida a favoritos")));
    } else {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Ya está en tus favoritos")));
    }
  }

  @override
  Widget build(BuildContext context) {
    return ListView.builder(
      itemCount: exampleTabs.length,
      itemBuilder: (context, index) {
        final item = exampleTabs[index];
        return Card(
          margin: EdgeInsets.all(10),
          child: Padding(
            padding: const EdgeInsets.all(12.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(item["title"]!, style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18)),
                SizedBox(height: 8),
                Text(
                  item["tab"]!,
                  style: TextStyle(fontFamily: "monospace"),
                ),
                SizedBox(height: 8),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    ElevatedButton.icon(
                      onPressed: () => _addToFavorites(item["tab"]!),
                      icon: Icon(Icons.favorite),
                      label: Text("Agregar a Favoritos"),
                    )
                  ],
                )
              ],
            ),
          ),
        );
      },
    );
  }
}

// === PESTAÑA: REPRODUCIR ===
class PlayTabPage extends StatefulWidget {
  @override
  _PlayTabPageState createState() => _PlayTabPageState();
}

class _PlayTabPageState extends State<PlayTabPage> {
  late AudioPlayer _audioPlayer;
  bool _playing = false;
  double _speed = 1.0;
  String _tabText = '';

  @override
  void initState() {
    super.initState();
    _audioPlayer = AudioPlayer();
    _loadExampleTab();
  }

  Future<void> _loadExampleTab() async {
    setState(() {
      _tabText = '''e|----0------------------|
B|--------1-------------|
G|------------0---------|
D|--------------2-------|
A|------------------3---|
E|----------------------|''';
    });
  }

  Future<void> _playTab() async {
    try {
      await _audioPlayer.setUrl("https://freesound.org/data/previews/438/438704_7516540-lq.mp3 ");
      _audioPlayer.setSpeed(_speed);
      await _audioPlayer.play();
      setState(() => _playing = true);
    } catch (e) {
      print("Error al reproducir: $e");
    }
  }

  void _pauseTab() {
    _audioPlayer.pause();
    setState(() => _playing = false);
  }

  @override
  void dispose() {
    _audioPlayer.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text("Reproducción de Tabs", style: Theme.of(context).textTheme.headline6),
          SizedBox(height: 10),
          Expanded(
            child: SingleChildScrollView(
              child: Container(
                padding: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.grey[200],
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  _tabText,
                  style: TextStyle(fontFamily: "monospace", fontSize: 16),
                ),
              ),
            ),
          ),
          SizedBox(height: 10),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              IconButton(
                icon: Icon(_playing ? Icons.pause_circle : Icons.play_circle),
                iconSize: 50,
                onPressed: _playing ? _pauseTab : _playTab,
              )
            ],
          ),
          SizedBox(height: 10),
          Text("Velocidad: ${(_speed * 100).toInt()}%"),
          Slider(
            min: 0.1,
            max: 1.0,
            divisions: 10,
            value: _speed,
            onChanged: (value) {
              setState(() {
                _speed = value;
              });
              if (_playing) {
                _audioPlayer.setSpeed(_speed);
              }
            },
          ),
          Wrap(
            spacing: 8,
            runSpacing: 8,
            alignment: WrapAlignment.center,
            children: [
              for (int i = 10; i <= 100; i += 10)
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      _speed = i / 100;
                    });
                    if (_playing) {
                      _audioPlayer.setSpeed(_speed);
                    }
                  },
                  child: Text("$i%"),
                )
            ],
          ),
        ],
      ),
    );
  }
}

// === PESTAÑA: CONFIGURACIÓN ===
class SettingsTabPage extends StatefulWidget {
  @override
  _SettingsTabPageState createState() => _SettingsTabPageState();
}

class _SettingsTabPageState extends State<SettingsTabPage> {
  bool _darkMode = false;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text("Ajustes", style: Theme.of(context).textTheme.headline6),
          SwitchListTile(
            title: Text("Tema oscuro"),
            value: _darkMode,
            onChanged: (value) {
              setState(() {
                _darkMode = value;
              });
            },
          ),
        ],
      ),
    );
  }
}
